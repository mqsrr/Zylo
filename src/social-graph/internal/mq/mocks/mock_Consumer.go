// Code generated by mockery v2.46.0. DO NOT EDIT.

package mq

import (
	amqp091 "github.com/rabbitmq/amqp091-go"
	mock "github.com/stretchr/testify/mock"
)

// MockConsumer is an autogenerated mock type for the Consumer type
type MockConsumer struct {
	mock.Mock
}

type MockConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumer) EXPECT() *MockConsumer_Expecter {
	return &MockConsumer_Expecter{mock: &_m.Mock}
}

// Consume provides a mock function with given fields: queue, consumeFunc
func (_m *MockConsumer) Consume(queue string, consumeFunc func(amqp091.Delivery)) error {
	ret := _m.Called(queue, consumeFunc)

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(amqp091.Delivery)) error); ok {
		r0 = rf(queue, consumeFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsumer_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type MockConsumer_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
//   - queue string
//   - consumeFunc func(amqp091.Delivery)
func (_e *MockConsumer_Expecter) Consume(queue interface{}, consumeFunc interface{}) *MockConsumer_Consume_Call {
	return &MockConsumer_Consume_Call{Call: _e.mock.On("Consume", queue, consumeFunc)}
}

func (_c *MockConsumer_Consume_Call) Run(run func(queue string, consumeFunc func(amqp091.Delivery))) *MockConsumer_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(amqp091.Delivery)))
	})
	return _c
}

func (_c *MockConsumer_Consume_Call) Return(_a0 error) *MockConsumer_Consume_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumer_Consume_Call) RunAndReturn(run func(string, func(amqp091.Delivery)) error) *MockConsumer_Consume_Call {
	_c.Call.Return(run)
	return _c
}

// PublishMessage provides a mock function with given fields: exchangeName, routingKey, v
func (_m *MockConsumer) PublishMessage(exchangeName string, routingKey string, v interface{}) error {
	ret := _m.Called(exchangeName, routingKey, v)

	if len(ret) == 0 {
		panic("no return value specified for PublishMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(exchangeName, routingKey, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsumer_PublishMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishMessage'
type MockConsumer_PublishMessage_Call struct {
	*mock.Call
}

// PublishMessage is a helper method to define mock.On call
//   - exchangeName string
//   - routingKey string
//   - v interface{}
func (_e *MockConsumer_Expecter) PublishMessage(exchangeName interface{}, routingKey interface{}, v interface{}) *MockConsumer_PublishMessage_Call {
	return &MockConsumer_PublishMessage_Call{Call: _e.mock.On("PublishMessage", exchangeName, routingKey, v)}
}

func (_c *MockConsumer_PublishMessage_Call) Run(run func(exchangeName string, routingKey string, v interface{})) *MockConsumer_PublishMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockConsumer_PublishMessage_Call) Return(_a0 error) *MockConsumer_PublishMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumer_PublishMessage_Call) RunAndReturn(run func(string, string, interface{}) error) *MockConsumer_PublishMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *MockConsumer) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsumer_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockConsumer_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockConsumer_Expecter) Shutdown() *MockConsumer_Shutdown_Call {
	return &MockConsumer_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockConsumer_Shutdown_Call) Run(run func()) *MockConsumer_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumer_Shutdown_Call) Return(_a0 error) *MockConsumer_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumer_Shutdown_Call) RunAndReturn(run func() error) *MockConsumer_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumer creates a new instance of MockConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumer {
	mock := &MockConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
