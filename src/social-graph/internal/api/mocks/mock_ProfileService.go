// Code generated by mockery v2.46.0. DO NOT EDIT.

package api

import (
	context "context"

	types "github.com/mqsrr/zylo/social-graph/internal/types"
	mock "github.com/stretchr/testify/mock"

	ulid "github.com/oklog/ulid/v2"
)

// MockProfileService is an autogenerated mock type for the ProfileService type
type MockProfileService struct {
	mock.Mock
}

type MockProfileService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProfileService) EXPECT() *MockProfileService_Expecter {
	return &MockProfileService_Expecter{mock: &_m.Mock}
}

// CloseConnection provides a mock function with given fields:
func (_m *MockProfileService) CloseConnection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProfileService_CloseConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseConnection'
type MockProfileService_CloseConnection_Call struct {
	*mock.Call
}

// CloseConnection is a helper method to define mock.On call
func (_e *MockProfileService_Expecter) CloseConnection() *MockProfileService_CloseConnection_Call {
	return &MockProfileService_CloseConnection_Call{Call: _e.mock.On("CloseConnection")}
}

func (_c *MockProfileService_CloseConnection_Call) Run(run func()) *MockProfileService_CloseConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProfileService_CloseConnection_Call) Return(_a0 error) *MockProfileService_CloseConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProfileService_CloseConnection_Call) RunAndReturn(run func() error) *MockProfileService_CloseConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfilePicture provides a mock function with given fields: ctx, userId
func (_m *MockProfileService) GetProfilePicture(ctx context.Context, userId ulid.ULID) (*types.FileMetadata, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetProfilePicture")
	}

	var r0 *types.FileMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ulid.ULID) (*types.FileMetadata, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ulid.ULID) *types.FileMetadata); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.FileMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ulid.ULID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileService_GetProfilePicture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfilePicture'
type MockProfileService_GetProfilePicture_Call struct {
	*mock.Call
}

// GetProfilePicture is a helper method to define mock.On call
//   - ctx context.Context
//   - userId ulid.ULID
func (_e *MockProfileService_Expecter) GetProfilePicture(ctx interface{}, userId interface{}) *MockProfileService_GetProfilePicture_Call {
	return &MockProfileService_GetProfilePicture_Call{Call: _e.mock.On("GetProfilePicture", ctx, userId)}
}

func (_c *MockProfileService_GetProfilePicture_Call) Run(run func(ctx context.Context, userId ulid.ULID)) *MockProfileService_GetProfilePicture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ulid.ULID))
	})
	return _c
}

func (_c *MockProfileService_GetProfilePicture_Call) Return(_a0 *types.FileMetadata, _a1 error) *MockProfileService_GetProfilePicture_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileService_GetProfilePicture_Call) RunAndReturn(run func(context.Context, ulid.ULID) (*types.FileMetadata, error)) *MockProfileService_GetProfilePicture_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProfileService creates a new instance of MockProfileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProfileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProfileService {
	mock := &MockProfileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
