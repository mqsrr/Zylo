// Code generated by mockery v2.46.0. DO NOT EDIT.

package storage

import (
	context "context"

	types "github.com/mqsrr/zylo/social-graph/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockStorage) CreateUser(ctx context.Context, user *types.User) (bool, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.User) (bool, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockStorage_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *types.User
func (_e *MockStorage_Expecter) CreateUser(ctx interface{}, user interface{}) *MockStorage_CreateUser_Call {
	return &MockStorage_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockStorage_CreateUser_Call) Run(run func(ctx context.Context, user *types.User)) *MockStorage_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.User))
	})
	return _c
}

func (_c *MockStorage_CreateUser_Call) Return(_a0 bool, _a1 error) *MockStorage_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_CreateUser_Call) RunAndReturn(run func(context.Context, *types.User) (bool, error)) *MockStorage_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserByID provides a mock function with given fields: ctx, userId
func (_m *MockStorage) DeleteUserByID(ctx context.Context, userId string) (bool, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_DeleteUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserByID'
type MockStorage_DeleteUserByID_Call struct {
	*mock.Call
}

// DeleteUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockStorage_Expecter) DeleteUserByID(ctx interface{}, userId interface{}) *MockStorage_DeleteUserByID_Call {
	return &MockStorage_DeleteUserByID_Call{Call: _e.mock.On("DeleteUserByID", ctx, userId)}
}

func (_c *MockStorage_DeleteUserByID_Call) Run(run func(ctx context.Context, userId string)) *MockStorage_DeleteUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_DeleteUserByID_Call) Return(_a0 bool, _a1 error) *MockStorage_DeleteUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_DeleteUserByID_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockStorage_DeleteUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, userID, name, bio, location
func (_m *MockStorage) UpdateUser(ctx context.Context, userID string, name string, bio string, location string) (bool, error) {
	ret := _m.Called(ctx, userID, name, bio, location)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (bool, error)); ok {
		return rf(ctx, userID, name, bio, location)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) bool); ok {
		r0 = rf(ctx, userID, name, bio, location)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, userID, name, bio, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockStorage_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - name string
//   - bio string
//   - location string
func (_e *MockStorage_Expecter) UpdateUser(ctx interface{}, userID interface{}, name interface{}, bio interface{}, location interface{}) *MockStorage_UpdateUser_Call {
	return &MockStorage_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, userID, name, bio, location)}
}

func (_c *MockStorage_UpdateUser_Call) Run(run func(ctx context.Context, userID string, name string, bio string, location string)) *MockStorage_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockStorage_UpdateUser_Call) Return(_a0 bool, _a1 error) *MockStorage_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_UpdateUser_Call) RunAndReturn(run func(context.Context, string, string, string, string) (bool, error)) *MockStorage_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
