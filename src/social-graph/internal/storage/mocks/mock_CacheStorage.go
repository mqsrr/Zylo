// Code generated by mockery v2.46.0. DO NOT EDIT.

package storage

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCacheStorage is an autogenerated mock type for the CacheStorage type
type MockCacheStorage struct {
	mock.Mock
}

type MockCacheStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheStorage) EXPECT() *MockCacheStorage_Expecter {
	return &MockCacheStorage_Expecter{mock: &_m.Mock}
}

// HDelete provides a mock function with given fields: ctx, key, fields
func (_m *MockCacheStorage) HDelete(ctx context.Context, key string, fields ...string) error {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheStorage_HDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HDelete'
type MockCacheStorage_HDelete_Call struct {
	*mock.Call
}

// HDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fields ...string
func (_e *MockCacheStorage_Expecter) HDelete(ctx interface{}, key interface{}, fields ...interface{}) *MockCacheStorage_HDelete_Call {
	return &MockCacheStorage_HDelete_Call{Call: _e.mock.On("HDelete",
		append([]interface{}{ctx, key}, fields...)...)}
}

func (_c *MockCacheStorage_HDelete_Call) Run(run func(ctx context.Context, key string, fields ...string)) *MockCacheStorage_HDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockCacheStorage_HDelete_Call) Return(_a0 error) *MockCacheStorage_HDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheStorage_HDelete_Call) RunAndReturn(run func(context.Context, string, ...string) error) *MockCacheStorage_HDelete_Call {
	_c.Call.Return(run)
	return _c
}

// HDeleteAll provides a mock function with given fields: ctx, key, pattern
func (_m *MockCacheStorage) HDeleteAll(ctx context.Context, key string, pattern string) error {
	ret := _m.Called(ctx, key, pattern)

	if len(ret) == 0 {
		panic("no return value specified for HDeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, pattern)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheStorage_HDeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HDeleteAll'
type MockCacheStorage_HDeleteAll_Call struct {
	*mock.Call
}

// HDeleteAll is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - pattern string
func (_e *MockCacheStorage_Expecter) HDeleteAll(ctx interface{}, key interface{}, pattern interface{}) *MockCacheStorage_HDeleteAll_Call {
	return &MockCacheStorage_HDeleteAll_Call{Call: _e.mock.On("HDeleteAll", ctx, key, pattern)}
}

func (_c *MockCacheStorage_HDeleteAll_Call) Run(run func(ctx context.Context, key string, pattern string)) *MockCacheStorage_HDeleteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCacheStorage_HDeleteAll_Call) Return(_a0 error) *MockCacheStorage_HDeleteAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheStorage_HDeleteAll_Call) RunAndReturn(run func(context.Context, string, string) error) *MockCacheStorage_HDeleteAll_Call {
	_c.Call.Return(run)
	return _c
}

// HGet provides a mock function with given fields: ctx, key, field, v
func (_m *MockCacheStorage) HGet(ctx context.Context, key string, field string, v interface{}) error {
	ret := _m.Called(ctx, key, field, v)

	if len(ret) == 0 {
		panic("no return value specified for HGet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, key, field, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheStorage_HGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HGet'
type MockCacheStorage_HGet_Call struct {
	*mock.Call
}

// HGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
//   - v interface{}
func (_e *MockCacheStorage_Expecter) HGet(ctx interface{}, key interface{}, field interface{}, v interface{}) *MockCacheStorage_HGet_Call {
	return &MockCacheStorage_HGet_Call{Call: _e.mock.On("HGet", ctx, key, field, v)}
}

func (_c *MockCacheStorage_HGet_Call) Run(run func(ctx context.Context, key string, field string, v interface{})) *MockCacheStorage_HGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockCacheStorage_HGet_Call) Return(_a0 error) *MockCacheStorage_HGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheStorage_HGet_Call) RunAndReturn(run func(context.Context, string, string, interface{}) error) *MockCacheStorage_HGet_Call {
	_c.Call.Return(run)
	return _c
}

// HSet provides a mock function with given fields: ctx, key, field, v, expire
func (_m *MockCacheStorage) HSet(ctx context.Context, key string, field string, v interface{}, expire time.Duration) error {
	ret := _m.Called(ctx, key, field, v, expire)

	if len(ret) == 0 {
		panic("no return value specified for HSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, field, v, expire)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheStorage_HSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HSet'
type MockCacheStorage_HSet_Call struct {
	*mock.Call
}

// HSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
//   - v interface{}
//   - expire time.Duration
func (_e *MockCacheStorage_Expecter) HSet(ctx interface{}, key interface{}, field interface{}, v interface{}, expire interface{}) *MockCacheStorage_HSet_Call {
	return &MockCacheStorage_HSet_Call{Call: _e.mock.On("HSet", ctx, key, field, v, expire)}
}

func (_c *MockCacheStorage_HSet_Call) Run(run func(ctx context.Context, key string, field string, v interface{}, expire time.Duration)) *MockCacheStorage_HSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(time.Duration))
	})
	return _c
}

func (_c *MockCacheStorage_HSet_Call) Return(_a0 error) *MockCacheStorage_HSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheStorage_HSet_Call) RunAndReturn(run func(context.Context, string, string, interface{}, time.Duration) error) *MockCacheStorage_HSet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheStorage creates a new instance of MockCacheStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheStorage {
	mock := &MockCacheStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
