// Code generated by mockery v2.46.0. DO NOT EDIT.

package config

import (
	context "context"

	azsecrets "github.com/Azure/azure-sdk-for-go/sdk/keyvault/azsecrets"

	mock "github.com/stretchr/testify/mock"
)

// MockSecretClient is an autogenerated mock type for the SecretClient type
type MockSecretClient struct {
	mock.Mock
}

type MockSecretClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretClient) EXPECT() *MockSecretClient_Expecter {
	return &MockSecretClient_Expecter{mock: &_m.Mock}
}

// GetSecret provides a mock function with given fields: ctx, name, version, options
func (_m *MockSecretClient) GetSecret(ctx context.Context, name string, version string, options *azsecrets.GetSecretOptions) (azsecrets.GetSecretResponse, error) {
	ret := _m.Called(ctx, name, version, options)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 azsecrets.GetSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *azsecrets.GetSecretOptions) (azsecrets.GetSecretResponse, error)); ok {
		return rf(ctx, name, version, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *azsecrets.GetSecretOptions) azsecrets.GetSecretResponse); ok {
		r0 = rf(ctx, name, version, options)
	} else {
		r0 = ret.Get(0).(azsecrets.GetSecretResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *azsecrets.GetSecretOptions) error); ok {
		r1 = rf(ctx, name, version, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretClient_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type MockSecretClient_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
//   - options *azsecrets.GetSecretOptions
func (_e *MockSecretClient_Expecter) GetSecret(ctx interface{}, name interface{}, version interface{}, options interface{}) *MockSecretClient_GetSecret_Call {
	return &MockSecretClient_GetSecret_Call{Call: _e.mock.On("GetSecret", ctx, name, version, options)}
}

func (_c *MockSecretClient_GetSecret_Call) Run(run func(ctx context.Context, name string, version string, options *azsecrets.GetSecretOptions)) *MockSecretClient_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*azsecrets.GetSecretOptions))
	})
	return _c
}

func (_c *MockSecretClient_GetSecret_Call) Return(_a0 azsecrets.GetSecretResponse, _a1 error) *MockSecretClient_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecretClient_GetSecret_Call) RunAndReturn(run func(context.Context, string, string, *azsecrets.GetSecretOptions) (azsecrets.GetSecretResponse, error)) *MockSecretClient_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecretClient creates a new instance of MockSecretClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretClient {
	mock := &MockSecretClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
